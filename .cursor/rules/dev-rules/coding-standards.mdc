---
description:
globs:
alwaysApply: false
---
# コーディング標準

## ファイル・ディレクトリ命名規則

### ファイル命名
- ファイル名は小文字とハイフンを使用（kebab-case）
- TypeScript/JavaScript: `user-service.ts`, `api-client.js`
- スタイル: `main-layout.css`, `button-styles.scss`
- 設定ファイル: `.eslintrc.json`, `package.json`

### ディレクトリ構造
```
project/
├── src/
│   ├── components/
│   ├── services/
│   ├── utils/
│   ├── types/
│   └── config/
├── tests/
├── docs/
└── .cursor/
    └── rules/
        └── dev-rules/
```

## コード品質

### 必須事項
1. **型安全性の確保**
   - TypeScriptを使用する場合は型定義を必須とする
   - `any`型の使用は最小限に抑制

2. **エラーハンドリング**
   - 適切なtry-catch文の使用
   - エラーメッセージの明確化
   - ログ出力の統一

3. **テスト**
   - 新機能には単体テストを必須とする
   - カバレッジ80%以上を目標とする

### 推奨事項
1. **関数・メソッド**
   - 単一責任の原則を遵守
   - 関数名は動詞から始める
   - 引数は5個以下に制限

2. **変数・定数**
   - 意味のある名前を使用
   - マジックナンバーの排除
   - 定数は大文字とアンダースコア

## 依存関係管理

### バージョン管理
- package.jsonでのバージョン固定
- 定期的な依存関係の更新とセキュリティチェック
- 不要な依存関係の定期的な削除

### 新規依存関係追加時の確認事項
1. ライセンスの互換性
2. メンテナンス状況
3. セキュリティ履歴
4. パフォーマンスへの影響
