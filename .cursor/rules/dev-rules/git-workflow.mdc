---
description:
globs:
alwaysApply: false
---
# Git ワークフロー

## ブランチ戦略

### ブランチ命名規則
- **feature/**: 新機能開発 `feature/user-authentication`
- **bugfix/**: バグ修正 `bugfix/login-error`
- **hotfix/**: 緊急修正 `hotfix/security-patch`
- **refactor/**: リファクタリング `refactor/api-structure`

### ブランチの管理
1. **main**: 本番環境にデプロイされるコード
2. **develop**: 開発中の統合ブランチ
3. **feature/***: 機能開発ブランチ
4. **release/***: リリース準備ブランチ

## コミットメッセージ

### 形式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### タイプ
- **feat**: 新機能
- **fix**: バグ修正
- **docs**: ドキュメント更新
- **style**: フォーマット変更（コード動作に影響なし）
- **refactor**: リファクタリング
- **test**: テスト追加・修正
- **chore**: ビルドプロセス、補助ツール変更

### 例
```
feat(auth): add user authentication system

- Implement JWT token validation
- Add login/logout endpoints
- Create user session management

Closes #123
```

## プルリクエスト

### 必須項目
1. **明確なタイトル**
   - 変更内容を簡潔に表現
   
2. **詳細な説明**
   - 変更理由
   - 実装内容
   - テスト方法

3. **チェックリスト**
   - [ ] テストが通過する
   - [ ] ドキュメントが更新されている
   - [ ] レビューが完了している
   - [ ] マージ競合が解決されている

### レビュープロセス
1. **自己レビュー**: 提出前の確認
2. **ピアレビュー**: チームメンバーによるレビュー
3. **テスト確認**: 自動テストの通過確認
4. **マージ**: 承認後のマージ実行

## タグとリリース

### タグ命名規則
- セマンティックバージョニング使用
- 形式: `v<major>.<minor>.<patch>`
- 例: `v1.2.3`, `v2.0.0-beta.1`

### リリースノート
- 新機能
- バグ修正
- 破壊的変更
- 非推奨機能
